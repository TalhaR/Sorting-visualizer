{"version":3,"sources":["components/Header.jsx","components/Controls.jsx","components/Element.jsx","helper/mergeSort.js","components/Body.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","textAlign","padding","Header","classes","className","Typography","variant","backgroundColor","arrayControls","height","justifyContent","alignItems","flexWrap","margin","spacing","sortControls","display","breakpoints","up","slider","Controls","setSorter","setSize","setSpeed","resetArray","isRunning","haltSort","Grid","container","item","xs","component","sm","Button","color","onClick","md","Slider","defaultValue","step","marks","min","max","valueLabelDisplay","disabled","onChange","e","value","onChangeCommitted","Element","width","style","getMergeAnimations","array","animations","clone","mergeSort","slice","length","aux","start","end","mid","Math","floor","index","leftPtr","rightPtr","push","props","merge","sleep","ms","Promise","resolve","setTimeout","setColor","domBars","Body","state","elements","maxBars","speed","bind","resetProps","resetPropPositions","handleSort","handleSize","handleSpeed","bubbleSort","quickSort","heapSort","heapify","this","setState","num","algorithm","a","console","log","size","right","left","document","getElementsByClassName","i","partition","pivotValue","pivotIndex","stack","pop","index1","index2","element","parseInt","pos","Date","getTime","j","low","high","Array","random","key","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0e341dbd.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        textAlign: 'center',\r\n        padding: '3% 0%',\r\n    }\r\n}));\r\n\r\nfunction Header() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={classes.root}>\r\n            <Typography variant=\"h2\">\r\n                <small>Sorting Visualizer</small>\r\n            </Typography>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import { Button, Grid, Slider } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: '#282c34',\r\n    },\r\n    arrayControls: {\r\n        height: '100px',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    sortControls: {\r\n        height: '100px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        [theme.breakpoints.up('md')]: {\r\n            '& > *': {\r\n                margin: theme.spacing(2),\r\n            },\r\n        }\r\n    },\r\n    slider: {}\r\n}));\r\n\r\nfunction Controls({setSorter, setSize, setSpeed, resetArray, isRunning, haltSort}) {\r\n    const classes = useStyles();\r\n\r\n    const handleReset = () => {\r\n        isRunning ? haltSort() : resetArray();\r\n    }\r\n\r\n    return (\r\n        <Grid container item xs={12} className={classes.root} component=\"section\">\r\n            <Grid container item xs={12} sm={6} className={classes.arrayControls}>\r\n                <Grid item>\r\n                    <Button color=\"primary\" variant=\"contained\" onClick={handleReset}>\r\n                        { isRunning? <>Stop</> : <>Reset</> }\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={7} md={8}>\r\n                    <Slider className={classes.slider} defaultValue={10} step={5} marks min={5} max={100} \r\n                            valueLabelDisplay=\"auto\" disabled={isRunning} onChange={(e, value) => setSize(value)} />\r\n\r\n                    <Slider className={classes.slider} defaultValue={2} step={1} marks min={1} max={10} \r\n                            valueLabelDisplay=\"auto\" onChangeCommitted={(e, value) => setSpeed(value)} />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} className={classes.sortControls}>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => setSorter('bubble')}>\r\n                    Bubble\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => setSorter('quick')}>\r\n                    Quick\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => setSorter('merge')}>\r\n                    Merge\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => setSorter('heap')}>\r\n                    Heap\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Controls\r\n","function Element({height, width, color}) {\r\n    return (\r\n        <div className=\"bar\" style={{ height: `${height}px`, width: width}} >\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Element\r\n","export default function getMergeAnimations(array) {\r\n    const animations = [];\r\n    const clone = [...array];\r\n    mergeSort(clone, clone.slice(), 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSort(array, aux, start, end, animations) {\r\n    if (start === end) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSort(aux, array, start, mid, animations);\r\n    mergeSort(aux, array, mid + 1, end, animations);\r\n    merge(array, aux, start, mid, end, animations);\r\n}\r\n\r\nfunction merge(array, aux, start, mid, end, animations) {\r\n    let index = start; \r\n    let leftPtr = start; \r\n    let rightPtr = mid + 1; \r\n\r\n    // go through left & right array up to ends of both\r\n    while (leftPtr <= mid && rightPtr <= end) {\r\n        animations.push([leftPtr, rightPtr])\r\n        \r\n        // pick the smallest element\r\n        if (aux[leftPtr].props.height <= aux[rightPtr].props.height) {\r\n            animations.push([index, aux[leftPtr]]);\r\n\r\n            array[index++] = aux[leftPtr++];\r\n        } else {\r\n            animations.push([index, aux[rightPtr]]);\r\n\r\n            array[index++] = aux[rightPtr++];\r\n        }\r\n    }\r\n\r\n    // added remaining elements of left array\r\n    while (leftPtr <= mid) {\r\n        animations.push([leftPtr, leftPtr]);\r\n        animations.push([index, aux[leftPtr]]);\r\n\r\n        array[index++] = aux[leftPtr++];\r\n    }\r\n\r\n    // added remaining elements of right array\r\n    while (rightPtr <= end) {\r\n        animations.push([rightPtr, rightPtr]);\r\n        animations.push([index, aux[rightPtr]]);\r\n        \r\n        array[index++] = aux[rightPtr++];\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport Controls from './Controls'\r\nimport Element from './Element'\r\nimport '../styles.css'\r\nimport '../helper/mergeSort'\r\nimport getMergeAnimations from '../helper/mergeSort'\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nfunction setColor(domBars, color) {\r\n    for (const bar of domBars) {\r\n        bar.style.backgroundColor = color; \r\n    }\r\n}\r\n\r\nclass Body extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            elements: [],\r\n            isRunning: false,\r\n            maxBars: 50,\r\n            speed: 60,\r\n        }\r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.resetProps = this.resetPropPositions.bind(this);\r\n        this.haltSort = this.haltSort.bind(this);\r\n        this.handleSort = this.handleSort.bind(this);\r\n        this.handleSize = this.handleSize.bind(this);\r\n        this.handleSpeed = this.handleSpeed.bind(this);\r\n        this.bubbleSort = this.bubbleSort.bind(this);\r\n        this.quickSort = this.quickSort.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n        this.heapSort = this.heapSort.bind(this);\r\n        this.heapify = this.heapify.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    componentDidUpdate() {}\r\n\r\n    haltSort() {\r\n        this.setState({isRunning: false});\r\n        this.resetPropPositions();\r\n    }\r\n\r\n    handleSize(num) {\r\n        if (num === this.state.maxBars) return;\r\n\r\n        this.setState({maxBars: num,});\r\n        this.resetArray();\r\n    }\r\n\r\n    handleSpeed(num) {\r\n        if (num === this.state.speed) return;\r\n        this.setState({speed: 60 / num});\r\n    }\r\n\r\n    async handleSort(algorithm) {\r\n        await this.setState({isRunning: true});\r\n        const array = [...this.state.elements];\r\n        switch (algorithm) {\r\n            case 'bubble':\r\n                this.bubbleSort(array);\r\n                break;\r\n            case 'quick':\r\n                this.quickSort(array);\r\n                break;\r\n            case 'merge':\r\n                this.mergeSort(array);\r\n                break;\r\n            case 'heap':\r\n                this.heapSort(array);\r\n                break;\r\n            default:\r\n                console.log('unexpected parameter for handleSort');\r\n                this.setState({isRunning: false,});\r\n        }\r\n    }\r\n\r\n    async heapify(array, index, size, domBars) {\r\n        if (!this.state.isRunning) return;\r\n        let left = 2 * index;\r\n        let right = left + 1;\r\n        let max;\r\n\r\n        if (right < size) {\r\n            setColor([domBars[left], domBars[right]], 'green');\r\n            await sleep(this.state.speed);\r\n            if (array[left].props.height >= array[right].props.height) {\r\n                max = left;\r\n            } else {\r\n                max = right;\r\n            }\r\n            setColor([domBars[left], domBars[right]], 'gray');\r\n        } \r\n        else if (left < size) {\r\n            max = left;\r\n        } \r\n        else return;\r\n\r\n        setColor([domBars[index], domBars[max]], 'green');\r\n        await sleep(this.state.speed);\r\n        if (array[index].props.height < array[max].props.height) {\r\n            setColor([domBars[index], domBars[max]], 'red');\r\n            [array[index], array[max]] = [array[max], array[index]];\r\n            this.setState({elements: array});\r\n            await sleep(this.state.speed);\r\n            setColor([domBars[index], domBars[max]], 'gray');\r\n\r\n            await this.heapify(array, max, size, domBars); \r\n        }\r\n        setColor([domBars[index], domBars[max]], 'gray');\r\n    }\r\n\r\n    async heapSort(array) {\r\n        const size = array.length;\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for(let i = Math.floor(size / 2) - 1; i >= 0; --i) {\r\n            if (!this.state.isRunning) {\r\n                this.resetPropPositions();\r\n                return;\r\n            }\r\n            await this.heapify(array, i, size, domBars);\r\n        }\r\n\r\n        for(let i = size - 1; i >= 0; --i) {\r\n            if (!this.state.isRunning) {\r\n                setColor([...domBars], 'gray');\r\n                this.resetPropPositions();\r\n                return;\r\n            }\r\n            setColor([domBars[i], domBars[0]], 'red');\r\n            [array[0], array[i]] = [array[i], array[0]];\r\n            \r\n            this.setState({elements: array});\r\n            await sleep(this.state.speed);\r\n            setColor([domBars[0]], 'gray');\r\n            setColor([domBars[i]], 'purple');\r\n\r\n            await this.heapify(array, 0, i, domBars);\r\n        }\r\n\r\n        this.setState({elements: array});\r\n        this.setState({isRunning: false,});\r\n    }\r\n\r\n    async quickSort(array) {\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        // choosing last element in array as pivot\r\n        const partition = async (array, start, end) => {\r\n            const pivotValue = array[end];\r\n            let pivotIndex = start;\r\n            setColor([domBars[end]], 'yellow');\r\n\r\n            for(let i = start; i < end; ++i) {\r\n                if (!this.state.isRunning) { \r\n                    setColor([domBars[end]], 'gray');\r\n                    this.resetPropPositions();\r\n                    return pivotIndex;\r\n                }\r\n\r\n                setColor([domBars[i]], 'green');\r\n                await sleep(this.state.speed);\r\n\r\n                if (array[i].props.height <= pivotValue.props.height) {\r\n                    setColor([domBars[i], domBars[pivotIndex]], 'red');\r\n\r\n                    [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\r\n                    this.setState({elements: array});\r\n                    await sleep(this.state.speed);\r\n\r\n                    setColor([domBars[i], domBars[pivotIndex]], 'gray');\r\n                    ++pivotIndex;\r\n                }\r\n                setColor([domBars[i]], 'gray');\r\n            }\r\n\r\n            setColor([domBars[end], domBars[pivotIndex]], 'red');\r\n            [array[end], array[pivotIndex]] = [array[pivotIndex], array[end]];\r\n            this.setState({elements: array});\r\n            await sleep(this.state.speed);\r\n            setColor([domBars[end], domBars[pivotIndex]], 'gray');\r\n\r\n            return pivotIndex;\r\n        }\r\n\r\n        const stack = [[0, array.length - 1]];\r\n\r\n        while(stack.length !== 0) {\r\n            if (!this.state.isRunning) {\r\n                this.resetPropPositions();\r\n                return;\r\n            }\r\n\r\n            const [start, end] = stack.pop();\r\n            const pivotIndex = await partition(array, start, end);\r\n\r\n            if (pivotIndex - 1 > start) {\r\n                stack.push([start, pivotIndex - 1]);\r\n            }\r\n\r\n            if (pivotIndex + 1 < end) {\r\n                stack.push([pivotIndex + 1, end]);\r\n            }\r\n        }\r\n\r\n        this.setState({isRunning: false,});\r\n    }\r\n    \r\n    async mergeSort(array) {\r\n        const animations = getMergeAnimations(array);\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for (let i = 0; i < animations.length; ++i) {\r\n            if (!this.state.isRunning) return;\r\n\r\n            if (i % 2 === 0) {\r\n                const [index1, index2] = animations[i];\r\n\r\n                setColor([domBars[index1], domBars[index2]], 'green');\r\n                await sleep(this.state.speed);\r\n                setColor([domBars[index1], domBars[index2]], 'gray');\r\n            } else {\r\n                const [index1, element] = animations[i];\r\n                const index2 = parseInt(element.props.pos)\r\n                array[index1] = <Element key={new Date().getTime()} pos={index1} height={element.props.height} />;\r\n                \r\n                this.setState({elements: array});\r\n                setColor([domBars[index1], domBars[index2]], 'red');\r\n                await sleep(this.state.speed);\r\n                setColor([domBars[index1], domBars[index2]], 'gray');\r\n            }\r\n        }\r\n        this.setState({isRunning: false});\r\n        this.resetPropPositions();\r\n    }\r\n    \r\n    async bubbleSort(array) {\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for(let i = 0; i < array.length; ++i) {\r\n            for(let j = 0; j < array.length - 1 - i; ++j) {\r\n                if (!this.state.isRunning) {\r\n                    setColor([...domBars], 'gray');\r\n                    this.resetPropPositions();\r\n                    return;\r\n                }\r\n                // highlight comparing elements in green\r\n                setColor([domBars[j], domBars[j + 1]], 'green');\r\n                await sleep(this.state.speed);\r\n\r\n                if (array[j].props.height > array[j + 1].props.height) {\r\n                    // highlight swapping elements red\r\n                    setColor([domBars[j], domBars[j + 1]], 'red');\r\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n                    this.setState({elements: array,});\r\n                    await sleep(this.state.speed);\r\n                } \r\n                // post-swap reset to normal\r\n                setColor([domBars[j], domBars[j + 1]], 'gray');\r\n            }\r\n            // sorted elements in purple\r\n            setColor([domBars[array.length - 1 - i]], 'purple'); \r\n        }\r\n\r\n        this.setState({isRunning: false});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Grid container className=\"root\" component=\"main\">\r\n                <Grid item xs={12} md={11} className=\"visualization\" component=\"section\">\r\n                    { this.state.elements }\r\n                </Grid>\r\n                <Controls setSorter={this.handleSort} setSize={this.handleSize} setSpeed={this.handleSpeed}\r\n                            resetArray={this.resetArray} isRunning={this.state.isRunning} haltSort={this.haltSort} />\r\n            </Grid>\r\n        )\r\n    };\r\n\r\n    resetArray() {\r\n        const getRandomInt = (low, high) => {\r\n            return Math.floor(Math.random() * (high - low + 1) + low);\r\n        }\r\n\r\n        const array = new Array(this.state.maxBars);\r\n        for(let i = 0; i < array.length; ++i) {\r\n            const height = getRandomInt(25, 500);\r\n            array[i] = <Element height={height} key={i} pos={i} />;\r\n        }\r\n\r\n        const domBars = document.getElementsByClassName('bar');\r\n        for(const bar of domBars) {\r\n            bar.style.backgroundColor = 'gray';\r\n        }\r\n\r\n        this.setState({elements: array});\r\n    }\r\n\r\n    resetPropPositions() {\r\n        const array = [...this.state.elements];\r\n\r\n        for(let i = 0; i < array.length; ++i) {\r\n            array[i] = <Element pos={i} height={array[i].props.height} key={array[i].key} />;\r\n        }\r\n\r\n        this.setState({elements: array});\r\n    }\r\n}\r\n\r\nexport default Body\r\n","import './App.css';\r\nimport Header from './components/Header';\r\nimport Body from './components/Body'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Body />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}