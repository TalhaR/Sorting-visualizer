{"version":3,"sources":["components/Header.jsx","components/Controls.jsx","components/Element.jsx","helper/mergeSort.js","components/Body.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","textAlign","padding","Header","classes","className","Typography","variant","backgroundColor","arrayControls","height","justifyContent","alignItems","flexWrap","margin","spacing","sortControls","display","slider","Controls","setSorter","setSize","setSpeed","resetArray","isRunning","selectSorter","algorithm","Grid","container","item","xs","component","sm","Button","color","disabled","onClick","md","Slider","defaultValue","step","marks","min","max","valueLabelDisplay","onChange","e","value","onChangeCommitted","Element","width","style","getMergeAnimations","array","animations","clone","mergeSort","slice","length","aux","start","end","mid","Math","floor","index","leftPtr","rightPtr","push","props","merge","sleep","ms","Promise","resolve","setTimeout","setColor","domBars","Body","state","elements","maxBars","speed","bind","handleSort","handleSize","handleSpeed","bubbleSort","quickSort","heapSort","heapify","this","num","setState","console","log","size","a","right","left","document","getElementsByClassName","i","partition","pivotValue","pivotIndex","stack","pop","index1","index2","element","key","j","low","high","random","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01c73b05.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        textAlign: 'center',\r\n        padding: '3% 0%',\r\n    }\r\n}));\r\n\r\nfunction Header() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={classes.root}>\r\n            <Typography variant=\"h2\">\r\n                <small>Sorting Visualizer</small>\r\n            </Typography>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import { Button, Grid, Slider } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: '#282c34',\r\n    },\r\n    arrayControls: {\r\n        height: '100px',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    sortControls: {\r\n        height: '100px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    slider: {\r\n    }\r\n}));\r\n\r\nfunction Controls({setSorter, setSize, setSpeed, resetArray, isRunning}) {\r\n    const classes = useStyles();\r\n\r\n    const selectSorter = (algorithm) => {\r\n        setSorter(algorithm);\r\n    }\r\n\r\n    return (\r\n        <Grid container item xs={12} className={classes.root} component=\"section\">\r\n            <Grid container item xs={12} sm={6} className={classes.arrayControls}>\r\n                <Grid item>\r\n                    <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => resetArray()}>\r\n                        Reset\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={7} md={8}>\r\n\r\n                    <Slider className={classes.slider} defaultValue={10} step={5} marks min={5} max={100} \r\n                            valueLabelDisplay=\"auto\" disabled={isRunning} onChange={(e, value) => setSize(value)} />\r\n\r\n                    <Slider className={classes.slider} defaultValue={2} step={1} marks min={1} max={10} \r\n                            valueLabelDisplay=\"auto\" onChangeCommitted={(e, value) => setSpeed(value)} />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} className={classes.sortControls}>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => selectSorter('bubble')}>\r\n                    Bubble\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => selectSorter('quick')}>\r\n                    Quick\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => selectSorter('merge')}>\r\n                    Merge\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => selectSorter('heap')}>\r\n                    Heap\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Controls\r\n","function Element({height, width, color}) {\r\n    return (\r\n        <div className=\"bar\" style={{ height: `${height}px`, width: width}} >\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Element\r\n","export default function getMergeAnimations(array) {\r\n    const animations = [];\r\n    const clone = [...array];\r\n    mergeSort(clone, clone.slice(), 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSort(array, aux, start, end, animations) {\r\n    if (start === end) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSort(aux, array, start, mid, animations);\r\n    mergeSort(aux, array, mid + 1, end, animations);\r\n    merge(array, aux, start, mid, end, animations);\r\n}\r\n\r\nfunction merge(array, aux, start, mid, end, animations) {\r\n    let index = start; \r\n    let leftPtr = start; \r\n    let rightPtr = mid + 1; \r\n\r\n    // go through left & right array up to ends of both\r\n    while (leftPtr <= mid && rightPtr <= end) {\r\n        animations.push([leftPtr, rightPtr])\r\n        \r\n        // pick the smallest element\r\n        if (aux[leftPtr].props.height <= aux[rightPtr].props.height) {\r\n            animations.push([index, aux[leftPtr]]);\r\n\r\n            array[index++] = aux[leftPtr++];\r\n        } else {\r\n            animations.push([index, aux[rightPtr]]);\r\n\r\n            array[index++] = aux[rightPtr++];\r\n        }\r\n    }\r\n\r\n    // added remaining elements of left array\r\n    while (leftPtr <= mid) {\r\n        animations.push([leftPtr, leftPtr]);\r\n        animations.push([index, aux[leftPtr]]);\r\n\r\n        array[index++] = aux[leftPtr++];\r\n    }\r\n\r\n    // added remaining elements of right array\r\n    while (rightPtr <= end) {\r\n        animations.push([rightPtr, rightPtr]);\r\n        animations.push([index, aux[rightPtr]]);\r\n        \r\n        array[index++] = aux[rightPtr++];\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport Controls from './Controls'\r\nimport Element from './Element'\r\nimport '../styles.css'\r\nimport '../helper/mergeSort'\r\nimport getMergeAnimations from '../helper/mergeSort'\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nfunction setColor(domBars, color) {\r\n    for (const bar of domBars) {\r\n        bar.style.backgroundColor = color; \r\n    }\r\n}\r\n\r\nclass Body extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            elements: [],\r\n            isRunning: false,\r\n            maxBars: 10,\r\n            speed: 60,\r\n        }\r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.handleSort = this.handleSort.bind(this);\r\n        this.handleSize = this.handleSize.bind(this);\r\n        this.handleSpeed = this.handleSpeed.bind(this);\r\n        this.bubbleSort = this.bubbleSort.bind(this);\r\n        this.quickSort = this.quickSort.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n        this.heapSort = this.heapSort.bind(this);\r\n        this.heapify = this.heapify.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    componentDidUpdate() {}\r\n\r\n    handleSize(num) {\r\n        if (num === this.state.maxBars) return;\r\n\r\n        this.setState({maxBars: num,});\r\n        this.resetArray();\r\n    }\r\n\r\n    handleSpeed(num) {\r\n        if (num === this.state.speed) return;\r\n        this.setState({speed: 60 / num});\r\n    }\r\n\r\n    handleSort(algorithm) {\r\n        this.setState({isRunning: true});\r\n        const array = [...this.state.elements];\r\n        switch (algorithm) {\r\n            case 'bubble':\r\n                this.bubbleSort(array);\r\n                break;\r\n            case 'quick':\r\n                this.quickSort(array);\r\n                break;\r\n            case 'merge':\r\n                this.mergeSort(array);\r\n                break;\r\n            case 'heap':\r\n                this.heapSort(array);\r\n                break;\r\n            default:\r\n                console.log('unexpected parameter for handleSort');\r\n                this.setState({isRunning: false,});\r\n        }\r\n    }\r\n\r\n    async heapify(array, index, size, domBars) {\r\n        let left = 2 * index;\r\n        let right = left + 1;\r\n        let max;\r\n\r\n        if (right < size) {\r\n            setColor([domBars[left], domBars[right]], 'green');\r\n            await sleep(this.state.speed);\r\n            if (array[left].props.height >= array[right].props.height) {\r\n                max = left;\r\n            } else {\r\n                max = right;\r\n            }\r\n            setColor([domBars[left], domBars[right]], 'gray');\r\n        } \r\n        else if (left < size) {\r\n            max = left;\r\n        } \r\n        else return;\r\n\r\n        setColor([domBars[index], domBars[max]], 'green');\r\n        await sleep(this.state.speed);\r\n        if (array[index].props.height < array[max].props.height) {\r\n            setColor([domBars[index], domBars[max]], 'red');\r\n            [array[index], array[max]] = [array[max], array[index]];\r\n            this.setState({elements: array});\r\n            await sleep(this.state.speed);\r\n            setColor([domBars[index], domBars[max]], 'gray');\r\n\r\n            await this.heapify(array, max, size, domBars); \r\n        }\r\n        setColor([domBars[index], domBars[max]], 'gray');\r\n    }\r\n\r\n    async heapSort(array) {\r\n        const size = array.length;\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for(let i = Math.floor(size / 2) - 1; i >= 0; --i) {\r\n            await this.heapify(array, i, size, domBars);\r\n        }\r\n\r\n        for(let i = size - 1; i >= 0; --i) {\r\n            setColor([domBars[i], domBars[0]], 'red');\r\n            [array[0], array[i]] = [array[i], array[0]];\r\n            \r\n            this.setState({elements: array});\r\n            await sleep(this.state.speed);\r\n            setColor([domBars[0]], 'gray');\r\n            setColor([domBars[i]], 'purple');\r\n\r\n            await this.heapify(array, 0, i, domBars);\r\n        }\r\n\r\n        this.setState({elements: array});\r\n        this.setState({isRunning: false,});\r\n    }\r\n\r\n    async quickSort(array) {\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        const partition = async (array, start, end) => {\r\n            const pivotValue = array[end];\r\n            let pivotIndex = start;\r\n            setColor([domBars[end]], 'yellow');\r\n\r\n            for(let i = start; i < end; ++i) {\r\n                setColor([domBars[i]], 'green');\r\n                await sleep(this.state.speed);\r\n\r\n                if (array[i].props.height <= pivotValue.props.height) {\r\n                    setColor([domBars[i], domBars[pivotIndex]], 'red');\r\n\r\n                    [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\r\n                    this.setState({elements: array});\r\n                    await sleep(this.state.speed);\r\n\r\n                    setColor([domBars[i], domBars[pivotIndex]], 'gray');\r\n                    ++pivotIndex;\r\n                }\r\n                setColor([domBars[i]], 'gray');\r\n            }\r\n\r\n            setColor([domBars[end], domBars[pivotIndex]], 'red');\r\n            [array[end], array[pivotIndex]] = [array[pivotIndex], array[end]];\r\n            this.setState({elements: array});\r\n            await sleep(this.state.speed);\r\n            setColor([domBars[end], domBars[pivotIndex]], 'gray');\r\n\r\n            return pivotIndex;\r\n        }\r\n\r\n        const stack = [[0, array.length - 1]];\r\n\r\n        while(stack.length !== 0) {\r\n            const [start, end] = stack.pop();\r\n\r\n            const pivotIndex = await partition(array, start, end);\r\n\r\n            if (pivotIndex - 1 > start) {\r\n                stack.push([start, pivotIndex - 1]);\r\n            }\r\n\r\n            if (pivotIndex + 1 < end) {\r\n                stack.push([pivotIndex + 1, end]);\r\n            }\r\n        }\r\n\r\n        this.setState({isRunning: false,});\r\n    }\r\n    \r\n    async mergeSort(array) {\r\n        const animations = getMergeAnimations(array);\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for (let i = 0; i < animations.length; ++i) {\r\n            if (i % 2 === 0) {\r\n                const [index1, index2] = animations[i];\r\n\r\n                setColor([domBars[index1], domBars[index2]], 'green');\r\n                await sleep(this.state.speed);\r\n                setColor([domBars[index1], domBars[index2]], 'gray');\r\n            } else {\r\n                const [index1, element] = animations[i];\r\n                array[index1] = <Element key={'overwrite' + i} height={element.props.height} />;\r\n                \r\n                this.setState({elements: array});\r\n                setColor([domBars[index1], domBars[element.key]], 'red');\r\n                await sleep(this.state.speed);\r\n                setColor([domBars[index1], domBars[element.key]], 'gray');\r\n            }\r\n        }\r\n        this.setState({isRunning: false});\r\n    }\r\n    \r\n    async bubbleSort(array) {\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for(let i = 0; i < array.length; ++i) {\r\n            for(let j = 0; j < array.length - 1 - i; ++j) {\r\n                // highlight comparing elements in green\r\n                setColor([domBars[j], domBars[j + 1]], 'green');\r\n                await sleep(this.state.speed);\r\n\r\n                if (array[j].props.height > array[j + 1].props.height) {\r\n                    // highlight swapping elements red\r\n                    setColor([domBars[j], domBars[j + 1]], 'red');\r\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n                    this.setState({elements: array,});\r\n                    await sleep(this.state.speed);\r\n                } \r\n                // post-swap reset to normal\r\n                setColor([domBars[j], domBars[j + 1]], 'gray');\r\n            }\r\n            // sorted elements in purple\r\n            setColor([domBars[array.length - 1 - i]], 'purple');\r\n        }\r\n\r\n        this.setState({isRunning: false});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Grid container className=\"root\" component=\"main\">\r\n                <Grid item xs={12} md={11} className=\"visualization\" component=\"section\">\r\n                    { this.state.elements }\r\n                </Grid>\r\n                <Controls setSorter={this.handleSort} setSize={this.handleSize} setSpeed={this.handleSpeed}\r\n                            resetArray={this.resetArray} isRunning={this.state.isRunning} />\r\n            </Grid>\r\n        )\r\n    };\r\n\r\n    resetArray() {\r\n        const getRandomInt = (low, high) => {\r\n            return Math.floor(Math.random() * (high - low + 1) + low);\r\n        }\r\n\r\n        const array = [];\r\n        for(let i = 0; i < this.state.maxBars; ++i) {\r\n            const height = getRandomInt(25, 500);\r\n            array.push(<Element height={height} key={i} />);\r\n        }\r\n\r\n        const domBars = document.getElementsByClassName('bar');\r\n        for(const bar of domBars) {\r\n            bar.style.backgroundColor = 'gray';\r\n        }\r\n\r\n        this.setState({elements: array});\r\n    }\r\n}\r\n\r\nexport default Body\r\n","import './App.css';\r\nimport Header from './components/Header';\r\nimport Body from './components/Body'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Body />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}