{"version":3,"sources":["components/Header.jsx","components/Controls.jsx","components/Element.jsx","helper/mergeSort.js","components/Body.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","textAlign","padding","Header","classes","className","Typography","variant","backgroundColor","arrayControls","height","display","justifyContent","alignItems","margin","spacing","sortControls","slider","maxWidth","Controls","setSorter","setSize","resetArray","isRunning","selectSorter","algorithm","Grid","container","item","xs","component","sm","Button","color","disabled","onClick","Slider","defaultValue","step","marks","min","max","valueLabelDisplay","onChange","e","value","Element","width","style","getMergeAnimations","array","animations","clone","mergeSort","slice","length","aux","start","end","mid","Math","floor","index","leftPtr","rightPtr","push","props","merge","sleep","ms","Promise","resolve","setTimeout","setColor","domBars","Body","state","elements","maxBars","bind","handleSort","handleSize","bubbleSort","quickSort","this","num","setState","console","log","a","document","getElementsByClassName","partition","pivotValue","pivotIndex","i","stack","pop","index1","index2","element","key","j","md","low","high","random","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.735930f5.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        textAlign: 'center',\r\n        padding: '3% 0%',\r\n    }\r\n}));\r\n\r\nfunction Header() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <header className={classes.root}>\r\n            <Typography variant=\"h2\">\r\n                <small>Sorting Visualizer</small>\r\n            </Typography>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import { Button, Grid, Slider } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: 'grey',\r\n    },\r\n    arrayControls: {\r\n        height: '100px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    sortControls: {\r\n        height: '100px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    slider: {\r\n        maxWidth: '60%',\r\n    }\r\n}));\r\n\r\nfunction Controls({setSorter, setSize, resetArray, isRunning}) {\r\n    const classes = useStyles();\r\n\r\n    const selectSorter = (algorithm) => {\r\n        setSorter(algorithm);\r\n    }\r\n\r\n    return (\r\n        <Grid container item xs={12} className={classes.root} component=\"section\">\r\n            <Grid item xs={12} sm={6} className={classes.arrayControls}>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => resetArray()}>\r\n                    Reset\r\n                </Button>\r\n\r\n                <Slider className={classes.slider} defaultValue={10} step={5} marks min={5} max={100} valueLabelDisplay=\"auto\" disabled={isRunning} onChange={(e, value) => setSize(value)} />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} className={classes.sortControls}>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => selectSorter('bubble')}>\r\n                    Bubble\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => selectSorter('quick')}>\r\n                    Quick\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={isRunning} onClick={() => selectSorter('merge')}>\r\n                    Merge\r\n                </Button>\r\n                <Button color=\"primary\" variant=\"contained\" disabled={true} onClick={() => selectSorter('heap')}>\r\n                    Heap\r\n                </Button>\r\n\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Controls\r\n","function Element({height, width, color}) {\r\n    return (\r\n        <div className=\"bar\" style={{ height: `${height}px`, width: width}} >\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Element\r\n","export default function getMergeAnimations(array) {\r\n    const animations = [];\r\n    const clone = [...array];\r\n    mergeSort(clone, clone.slice(), 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSort(array, aux, start, end, animations) {\r\n    if (start === end) return;\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSort(aux, array, start, mid, animations);\r\n    mergeSort(aux, array, mid + 1, end, animations);\r\n    merge(array, aux, start, mid, end, animations);\r\n}\r\n\r\nfunction merge(array, aux, start, mid, end, animations) {\r\n    let index = start; \r\n    let leftPtr = start; \r\n    let rightPtr = mid + 1; \r\n\r\n    // go through left & right array up to ends of both\r\n    while (leftPtr <= mid && rightPtr <= end) {\r\n        animations.push([leftPtr, rightPtr])\r\n        \r\n        // pick the smallest element\r\n        if (aux[leftPtr].props.height <= aux[rightPtr].props.height) {\r\n            animations.push([index, aux[leftPtr]]);\r\n\r\n            array[index++] = aux[leftPtr++];\r\n        } else {\r\n            animations.push([index, aux[rightPtr]]);\r\n\r\n            array[index++] = aux[rightPtr++];\r\n        }\r\n    }\r\n\r\n    // added remaining elements of left array\r\n    while (leftPtr <= mid) {\r\n        animations.push([leftPtr, leftPtr]);\r\n        animations.push([index, aux[leftPtr]]);\r\n\r\n        array[index++] = aux[leftPtr++];\r\n    }\r\n\r\n    // added remaining elements of right array\r\n    while (rightPtr <= end) {\r\n        animations.push([rightPtr, rightPtr]);\r\n        animations.push([index, aux[rightPtr]]);\r\n        \r\n        array[index++] = aux[rightPtr++];\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport Controls from './Controls'\r\nimport Element from './Element'\r\nimport '../styles.css'\r\nimport '../helper/mergeSort'\r\nimport getMergeAnimations from '../helper/mergeSort'\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nfunction setColor(domBars, color) {\r\n    for (const bar of domBars) {\r\n        bar.style.backgroundColor = color; \r\n    }\r\n}\r\n\r\nclass Body extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            elements: [],\r\n            isRunning: false,\r\n            maxBars: 10,\r\n        }\r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.handleSort = this.handleSort.bind(this);\r\n        this.handleSize = this.handleSize.bind(this);\r\n        this.bubbleSort = this.bubbleSort.bind(this);\r\n        this.quickSort = this.quickSort.bind(this);\r\n        this.mergeSort = this.mergeSort.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    componentDidUpdate() {}\r\n\r\n    handleSize(num) {\r\n        if (num === this.state.maxBars) return;\r\n\r\n        this.setState({maxBars: num,});\r\n        this.resetArray();\r\n    }\r\n\r\n    handleSort(algorithm) {\r\n        this.setState({isRunning: true});\r\n        const array = [...this.state.elements];\r\n        switch (algorithm) {\r\n            case 'bubble':\r\n                this.bubbleSort(array);\r\n                break;\r\n            case 'quick':\r\n                this.quickSort(array);\r\n                break;\r\n            case 'merge':\r\n                this.mergeSort(array);\r\n                break;\r\n            case 'heap':\r\n                break;\r\n            default:\r\n                console.log('unexpected parameter for handleSort');\r\n                this.setState({isRunning: false,});\r\n        }\r\n    }\r\n\r\n    async quickSort(array) {\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        const partition = async (array, start, end) => {\r\n            const pivotValue = array[end];\r\n            let pivotIndex = start;\r\n            setColor([domBars[end]], 'yellow');\r\n\r\n            for(let i = start; i < end; ++i) {\r\n                setColor([domBars[i]], 'green');\r\n                await sleep(20);\r\n\r\n                if (array[i].props.height <= pivotValue.props.height) {\r\n                    setColor([domBars[i], domBars[pivotIndex]], 'red');\r\n\r\n                    [array[i], array[pivotIndex]] = [array[pivotIndex], array[i]];\r\n                    this.setState({elements: array});\r\n                    await sleep(20);\r\n\r\n                    setColor([domBars[i], domBars[pivotIndex]], 'gray');\r\n                    ++pivotIndex;\r\n                }\r\n                setColor([domBars[i]], 'gray');\r\n            }\r\n\r\n            setColor([domBars[end], domBars[pivotIndex]], 'red');\r\n            [array[end], array[pivotIndex]] = [array[pivotIndex], array[end]];\r\n            this.setState({elements: array});\r\n            await sleep(20);\r\n            setColor([domBars[end], domBars[pivotIndex]], 'gray');\r\n\r\n            return pivotIndex;\r\n        }\r\n\r\n        const stack = [[0, array.length - 1]];\r\n\r\n        while(stack.length !== 0) {\r\n            const [start, end] = stack.pop();\r\n\r\n            const pivotIndex = await partition(array, start, end);\r\n\r\n            if (pivotIndex - 1 > start) {\r\n                stack.push([start, pivotIndex - 1]);\r\n            }\r\n\r\n            if (pivotIndex + 1 < end) {\r\n                stack.push([pivotIndex + 1, end]);\r\n            }\r\n        }\r\n\r\n        this.setState({isRunning: false,});\r\n    }\r\n    \r\n    async mergeSort(array) {\r\n        const animations = getMergeAnimations(array);\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for (let i = 0; i < animations.length; ++i) {\r\n            if (i % 2 === 0) {\r\n                const [index1, index2] = animations[i];\r\n\r\n                setColor([domBars[index1], domBars[index2]], 'green');\r\n                await sleep(25);\r\n                setColor([domBars[index1], domBars[index2]], 'gray');\r\n            } else {\r\n                const [index1, element] = animations[i];\r\n                array[index1] = <Element key={'overwrite' + i} height={element.props.height} />;\r\n                \r\n                this.setState({elements: array});\r\n                setColor([domBars[index1], domBars[element.key]], 'red');\r\n                await sleep(25);\r\n                setColor([domBars[index1], domBars[element.key]], 'gray');\r\n            }\r\n        }\r\n        this.setState({isRunning: false});\r\n    }\r\n    \r\n    async bubbleSort(array) {\r\n        const domBars = document.getElementsByClassName('bar');\r\n\r\n        for(let i = 0; i < array.length; ++i) {\r\n            for(let j = 0; j < array.length - 1 - i; ++j) {\r\n                // highlight comparing elements in green\r\n                setColor([domBars[j], domBars[j + 1]], 'green');\r\n                await sleep(10);\r\n\r\n                if (array[j].props.height > array[j + 1].props.height) {\r\n                    // highlight swapping elements red\r\n                    setColor([domBars[j], domBars[j + 1]], 'red');\r\n                    [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n                    this.setState({elements: array,});\r\n                    await sleep(10);\r\n                } \r\n                // post-swap reset to normal\r\n                setColor([domBars[j], domBars[j + 1]], 'gray');\r\n            }\r\n            // sorted elements in purple\r\n            setColor([domBars[array.length - 1 - i]], 'purple');\r\n        }\r\n\r\n        this.setState({isRunning: false});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Grid container className=\"root\" component=\"main\">\r\n                <Grid item xs={12} md={11} className=\"visualization\" component=\"section\">\r\n                    { this.state.elements }\r\n                </Grid>\r\n                <Controls setSorter={this.handleSort} setSize={this.handleSize} \r\n                            resetArray={this.resetArray} isRunning={this.state.isRunning} />\r\n            </Grid>\r\n        )\r\n    };\r\n\r\n    resetArray() {\r\n        const getRandomInt = (low, high) => {\r\n            return Math.floor(Math.random() * (high - low + 1) + low);\r\n        }\r\n\r\n        const array = [];\r\n        for(let i = 0; i < this.state.maxBars; ++i) {\r\n            const height = getRandomInt(25, 500);\r\n            array.push(<Element height={height} key={i} />);\r\n        }\r\n\r\n        const domBars = document.getElementsByClassName('bar');\r\n        for(const bar of domBars) {\r\n            bar.style.backgroundColor = 'gray';\r\n        }\r\n\r\n        this.setState({elements: array});\r\n    }\r\n}\r\n\r\nexport default Body\r\n","import './App.css';\r\nimport Header from './components/Header';\r\nimport Body from './components/Body'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Body />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}